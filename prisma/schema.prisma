// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")
    email      String   @unique
    password   String
    isAdmin    Boolean  @default(false) @map("is_admin")
    name       String   @unique
    avatarPath String   @default("/uploads/default-avatar.png") @map("vatar_path")
    phone      String   @default("")

    orders    Order[]
    reviews   Review[]
    favorites Product[]
}

model Product {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    name            String
    slug            String
    description     String
    price           Int
    images          String[]
    orderItems      OrderItem[]
    reviews         Review[]
    category        Category?         @relation(fields: [categoryId], references: [id])
    categoryId      Int?              @map("category_id")
    user            User?             @relation(fields: [userId], references: [id])
    userId          Int?
    setups          Setups?           @relation(fields: [setupsId], references: [id])
    setupsId        Int?              @map("setups_id")
    ProductInSetups ProductInSetups[]
}

model Category {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    name             String
    slug             String            @unique
    description      String
    image            String
    products         Product[]
    productsInSetups ProductInSetups[]
}

model Setups {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    name            String
    description     String
    image           String
    products        Product[]
    ProductInSetups ProductInSetups[]
}

model ProductInSetups {
    id         Int       @id @default(autoincrement())
    setup      Setups    @relation(fields: [setupId], references: [id])
    setupId    Int
    product    Product   @relation(fields: [productId], references: [id])
    productId  Int
    Category   Category? @relation(fields: [categoryId], references: [id])
    categoryId Int?

    @@index([setupId, productId]) // Уникальный индекс не создается, разрешая дублирование
}

model Review {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    rating Int
    text   String

    user   User @relation(fields: [userId], references: [id])
    userId Int  @map("user_id")

    product   Product @relation(fields: [productId], references: [id])
    productId Int     @map("product_id")
}

model Order {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    status EnumOrderStatus @default(PENDING)

    items OrderItem[]
    total Int

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @map("user_id")

    paymentIntentId String
    paymentUrl      String?

    firstName String
    lastName  String
    country   String
    state     String
    city      String
    postCode  String
    street    String
    house     String
    phoneCode String
    phone     String
    email     String
}

enum EnumOrderStatus {
    PENDING
    PAYED
    SHIPPED
    DELIVERED
}

model OrderItem {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    quantity Int
    price    Int

    order   Order? @relation(fields: [orderId], references: [id])
    orderId Int?   @map("order_id")

    product   Product? @relation(fields: [productId], references: [id])
    productId Int      @map("product_id")

    @@map("Order_item")
}
